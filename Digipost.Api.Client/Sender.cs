using System;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace Digipost.Api.Client
{

    public class Sender
    {

        public static readonly string BaseAddress = "https://qa2.api.digipost.no/";

        public static async Task<string> SendAsync(string forsendelseId, string digipostAdresse, string emne)
        {
            var loggingHandler = new LoggingHandler(new HttpClientHandler());

            using (var client = new HttpClient(loggingHandler))
            {
                client.BaseAddress = new Uri(BaseAddress);

                var date = DateTime.UtcNow.ToString("R");
                var hash = ComputeHash(GetXmlMessage());
                var userId = GetUserId();

                client.DefaultRequestHeaders.Add("X-Digipost-UserId", userId);
                client.DefaultRequestHeaders.Add("Date", date);
                client.DefaultRequestHeaders.Add("X-Content-SHA256", hash);

                var request = new HttpRequestMessage(HttpMethod.Post, "messages")
                {
                    Content = new StringContent(GetXmlMessage(), Encoding.UTF8, "application/vnd.digipost-v6+xml")
                };

                client.DefaultRequestHeaders.Add("X-Digipost-Signature", ComputeSignature(request, date, hash, userId));
                
                var response = await client.SendAsync(request);
                
            }

            return null;
        }

        private static string ComputeSignature(HttpRequestMessage request, string date, string sha256hash, string userId)
        {
            var parameters = "";//HttpUtility.UrlEncode(request.RequestUri.Query).ToLower();

            Debug.WriteLine("Canonical string generated by .NET Client:");
            Debug.WriteLine("===START===");
            
            var s = request.Method.ToString().ToUpper() + "\n" +
                    "/" + request.RequestUri.ToString().ToLower() + "\n" +
                    "date: " + date + "\n" +
                    "x-content-sha256: " + sha256hash+ "\n" +
                    "x-digipost-userid: " + userId + "\n" +
                    parameters + "\n";

            Debug.Write(s);
            Debug.WriteLine("===SLUTT===");


            var rsa = GetCert().PrivateKey as RSACryptoServiceProvider;
            var privateKeyBlob = rsa.ExportCspBlob(true);
            var rsa2 = new RSACryptoServiceProvider();
            rsa2.ImportCspBlob(privateKeyBlob);

            var sha = SHA256.Create();
            var hash = sha.ComputeHash(Encoding.UTF8.GetBytes(s));
            var signature = rsa2.SignHash(hash, CryptoConfig.MapNameToOID("SHA256"));

            return Convert.ToBase64String(signature);
        }

        private static X509Certificate2 GetCert()
        {
            return new X509Certificate2(@"Z:\aleksander sjafjell On My Mac\Development\Shared\sdp-data\testdata\rest\certificate.p12", "Qwer12345", X509KeyStorageFlags.Exportable);
        }

        private static string ComputeHash(string input)
        {
            HashAlgorithm hashAlgorithm = new SHA256CryptoServiceProvider();
            Byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            Byte[] hashedBytes = hashAlgorithm.ComputeHash(inputBytes);

            return Convert.ToBase64String(hashedBytes);
        }

        private static string GetXmlMessage()
        {
            return "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><message xmlns=\"http://api.digipost.no/schema/v6\"><recipient><personal-identification-number>01013300001</personal-identification-number></recipient><primary-document><uuid>37740f5c-3654-45b8-923f-be9fc8a56af5</uuid><subject>Dokumentets emne</subject><file-type>pdf</file-type><sms-notification><after-hours>1</after-hours></sms-notification><authentication-level>PASSWORD</authentication-level><sensitivity-level>NORMAL</sensitivity-level></primary-document></message>";
        }

        private static string GetUserId()
        {
            return "106768801";
        }


    }
}
