using System;
using System.Diagnostics;
using System.Net.Http;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Digipost.Api.Client.Domain;

namespace Digipost.Api.Client.Handlers
{
    internal class AuthenticationHandler : DelegatingHandler
    {
        public AuthenticationHandler(ClientConfig clientConfig, X509Certificate2 businessCertificate, string url,
            HttpMessageHandler innerHandler)
            : base(innerHandler)
        {
            ClientConfig = clientConfig;
            Url = url;
            BusinessCertificate = businessCertificate;
        }

        private ClientConfig ClientConfig { get; set; }
        private string Url { get; set; }
        private X509Certificate2 BusinessCertificate { get; set; }

        protected override async Task<HttpResponseMessage> SendAsync(
            HttpRequestMessage request, CancellationToken cancellationToken)
        {
            Logging.Log(TraceEventType.Information, " AuthenticationHandler > sendAsync() - Start!");
            const string method = "POST";
            var date = DateTime.UtcNow.ToString("R");
            var technicalSender = ClientConfig.SenderId;
            var multipartContent = await request.Content.ReadAsByteArrayAsync();

            Logging.Log(TraceEventType.Information, " - Hashing byteStream of body content");
            var computeHash = ComputeHash(multipartContent);

            request.Headers.Add("X-Digipost-UserId", ClientConfig.SenderId);
            request.Headers.Add("Date", date);
            request.Headers.Add("Accept", DigipostVersion.V6);
            request.Headers.Add("X-Content-SHA256", computeHash);
            request.Headers.Add("X-Digipost-Signature", ComputeSignature(method, Url, date, computeHash,
                technicalSender, BusinessCertificate));
            request.Headers.Add("UserAgent", GetAssemblyVersion());

            return await base.SendAsync(request, cancellationToken);
        }

        private static string GetAssemblyVersion()
        {
            var netVersion = Assembly
                    .GetExecutingAssembly()
                    .GetReferencedAssemblies().First(x => x.Name == "System.Core").Version.ToString();

            var assemblyVersion = Assembly.GetExecutingAssembly().GetName().Version;

            return string.Format("Digipost-Api/{1} .NET/{0},", netVersion, assemblyVersion);
        }

        private static string ComputeHash(byte[] inputBytes)
        {
            HashAlgorithm hashAlgorithm = new SHA256CryptoServiceProvider();
            var hashedBytes = hashAlgorithm.ComputeHash(inputBytes);

            return Convert.ToBase64String(hashedBytes);
        }

        private static string ComputeSignature(string method, string uri, string date, string sha256Hash,
            string userId, X509Certificate2 businessCertificate)
        {
            const string parameters = ""; //HttpUtility.UrlEncode(request.RequestUri.Query).ToLower();

            Logging.Log(TraceEventType.Information, "Canonical string generated by .NET Client:");
            Logging.Log(TraceEventType.Information, "===START===");

            var s = method.ToUpper() + "\n" +
                    "/" + uri.ToLower() + "\n" +
                    "date: " + date + "\n" +
                    "x-content-sha256: " + sha256Hash + "\n" +
                    "x-digipost-userid: " + userId + "\n" +
                    parameters + "\n";

            Logging.Log(TraceEventType.Information, s);
            Logging.Log(TraceEventType.Information, "===SLUTT===");


            var rsa = businessCertificate.PrivateKey as RSACryptoServiceProvider;
            var rsa2 = new RSACryptoServiceProvider();

            try
            {
                var privateKeyBlob = rsa.ExportCspBlob(true);
                rsa2.ImportCspBlob(privateKeyBlob);
            }
            catch (Exception e)
            {
                Logging.Log(TraceEventType.Error, e.Message);
                throw new CryptographicException(
                    "Exception while exporting CspBlob. Check if certificate is exportable.");
            }

            var sha = SHA256.Create();
            var hash = sha.ComputeHash(Encoding.UTF8.GetBytes(s));
            var signature = rsa2.SignHash(hash, CryptoConfig.MapNameToOID("SHA256"));

            return Convert.ToBase64String(signature);
        }
    }
}